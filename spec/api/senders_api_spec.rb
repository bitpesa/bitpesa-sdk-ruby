=begin
#BitPesa API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for BitPesa::SendersApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'SendersApi' do
  before do
    # run before each test
    @instance = BitPesa::SendersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SendersApi' do
    it 'should create an instance of SendersApi' do
      expect(@instance).to be_instance_of(BitPesa::SendersApi)
    end
  end

  # unit tests for delete_sender
  # Deleting a sender
  # Deletes a single sender by the Sender ID
  # @param sender_id ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2011]
  describe 'delete_sender test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_sender
  # Fetching a sender
  # Returns a single sender by the Sender ID
  # @param sender_id ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2011]
  describe 'get_sender test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_senders
  # Listing senders
  # Get a list of available senders
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20015]
  describe 'get_senders test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_sender
  # Updating a sender
  # Updates the sender specified in the URL path.
  # @param sender_id ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
  # @param sender 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2011]
  describe 'patch_sender test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_senders
  # Creating a sender
  # Creates a new sender and transitions their onboarding status  When a sender is created you will receive a response which contains the senders status. Possible states for a sender are:  - initial - When a sender is created and has not been through any KYC checking (cannot transact) - verified - A sender has passed sanction list checks (cannot transact) - approved - The sender has passed both KYC and sanction checks (can transact) - banned - An admin has banned the sender (cannot transact) - rejected - The sender has failed sanction list checks (cannot transact) - disabled - A sender is put into this state as a result of a delete request via the API (cannot transact) 
  # @param sender 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2011]
  describe 'post_senders test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
