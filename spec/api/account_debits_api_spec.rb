=begin
#BitPesa API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for BitPesa::AccountDebitsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'AccountDebitsApi' do
  before do
    # run before each test
    @instance = BitPesa::AccountDebitsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AccountDebitsApi' do
    it 'should create an instance of AccountDebitsApi' do
      expect(@instance).to be_instance_of(BitPesa::AccountDebitsApi)
    end
  end

  # unit tests for get_accounts_debit
  # Fetching an account debit
  # Returns a single account debit by the account debit ID
  # @param account_debit_id ID of the account debit to get.  Example: &#x60;/v1/accounts/debits/9170c890-1a45-46bd-9b79-3deeb8b4ff3d&#x60;
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2003]
  describe 'get_accounts_debit test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_accounts_debits
  # Listing Accounts debits
  # Get a list of accounts debits
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2002]
  describe 'get_accounts_debits test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_accounts_debits
  # Creating an account debit
  # Creates a new account debit  Funding transactions can be done using the POST /v1/accounts/debits endpoint, with the following body - &#x60;&#x60;&#x60;JSON {   \&quot;debit\&quot;: {     \&quot;currency\&quot;: \&quot;NGN\&quot;,     \&quot;amount\&quot;: \&quot;2000.0\&quot;,     \&quot;to_id\&quot;: \&quot;5f44026b-7904-4c30-87d6-f8972d790ded\&quot;,     \&quot;to_type\&quot;: \&quot;Transaction\&quot;   } } &#x60;&#x60;&#x60;  To successfully fund a transaction -  - The currency needs to be the same as the input_currency on the transaction - The amount has to be the same as the input_amount on the transaction - The to_id is the id of the transaction - You need to have enough balance of the appropriate currency inside your wallet  Once the transaction is funded, we will immediately start trying to pay out the recipient(s).  ## Creating bulk account debits  To create multiple account debits an array of account debit objects should be sent using the POST /v1/accounts/debits endpoint. An example is below -  &#x60;&#x60;&#x60;JSON {   \&quot;debit\&quot;: [     {       \&quot;currency\&quot;: \&quot;BTC\&quot;,       \&quot;amount\&quot;: 2.0,       \&quot;to_id\&quot;: \&quot;d9269c2a-7049-4625-b3b8-30e25ad33162\&quot;,       \&quot;to_type\&quot;: \&quot;Transaction\&quot;,       \&quot;metadata\&quot;: {         \&quot;id\&quot;: \&quot;b783a4f5-a959-4a1f-87fa-112fe6eae9e4\&quot;       }     },     {       \&quot;currency\&quot;: \&quot;BTC\&quot;,       \&quot;amount\&quot;: 2.0,       \&quot;to_id\&quot;: \&quot;912973a9-e027-4768-8e98-5a8f44469bf4\&quot;,       \&quot;to_type\&quot;: \&quot;Transaction\&quot;,       \&quot;metadata\&quot;: {         \&quot;id\&quot;: \&quot;4900f50a-bfb6-469f-ad0e-8c8cf0ef5dfa\&quot;       }     }   ] } &#x60;&#x60;&#x60; 
  # @param debit 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse201]
  describe 'post_accounts_debits test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
