=begin
#BitPesa API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for BitPesa::TransactionsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TransactionsApi' do
  before do
    # run before each test
    @instance = BitPesa::TransactionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TransactionsApi' do
    it 'should create an instance of TransactionsApi' do
      expect(@instance).to be_instance_of(BitPesa::TransactionsApi)
    end
  end

  # unit tests for calculate_transactions
  # Calculates transaction amounts for a transaction payload
  # Calculates the input, output and fee amounts for the recipients in a transaction payload
  # @param transaction Transaction payload to be calculated
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2012]
  describe 'calculate_transactions test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for payin_transaction
  # Creates a fake payin for transaction
  # This method is available only in sandbox environment and is supposed to be used only for testing integration. It allows you to emulate a payin without paying actual money. 
  # @param transaction_id ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60;
  # @param payin_method A partial payin method object
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2012]
  describe 'payin_transaction test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for payout_transaction
  # Creates a fake payout for transaction
  # This method is available only in sandbox environment and is supposed to be used only for testing. It allows you to emulate the payout of a transaction after payin. 
  # @param transaction_id ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60;
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2012]
  describe 'payout_transaction test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_transactions
  # Creates a new transaction
  # Transactions are the main objects in the BitPesa API, so it&#39;s important to understand how to create and manage them. Transactions facilitate money movement from one Sender in a specific currency to one or multiple Recipients in another currency.  The main flow of a successful transaction flow is the following - - Transaction is created linking the Sender to the Recipient(s) with the requested amounts. - Once the sender is KYC&#39;d and approved the transaction can be funded. - Once the transaction is funded, we will initiate the payout to the recipient(s). - After the recipient (or all recipients) has received the money, the transaction is finished.  Unfortunately not all transactions are successful. The main causes of issues are the following - - Transactions are cancelled automatically if they are not funded within the first hour of creation. - The recipient details might be wrong (for example the destination bank account number is invalid), or there are other issues blocking the successful payout. In these cases the transaction has to be cancelled.  In order to transact with Bitpesa we need to have an approved sender record. The flow for approving senders depend on whether KYC requirements are waived for your integration or not (See the notes section).  In case the KYC requirements are not waived then the typical flow for approval this will be the following.  ![Senders KYC Flow](https://raw.githubusercontent.com/bitpesa/api-documentation/master/uml/sender-kyc.png)  *Notes*  - The sender&#39;s phone number is composed of two parts, the phone_country (in ISO 2-letter format), and the phone_number. The phone number should be specified without the international prefix. - The documents should contain all documents necessary to KYC the sender.   - If you already do KYC on your system, then please contact us and we can waive this requirement from you. In this case you should send us an empty list of documents - &#x60;\&quot;documents\&quot;: [ ]&#x60; in the request. All of the senders you create in the system will be immediately set to the approved state and you won&#39;t need to wait for them to get approved.   - If when creating senders or transactions you get the following error in the response - &#x60;\&quot;errors\&quot;:{\&quot;documents\&quot;:[{\&quot;error\&quot;:\&quot;blank\&quot;}]}&#x60; it means that KYC requirements are not yet waived for your account. If we already approved your KYC process and so they should be, then please contact us so we can rectify the issue and update your account accordingly.   - In case you don&#39;t do KYC on your site, then you will need to send us documents that we can use to verify the sender&#39;s identity, for more details on this please see the API reference documentation. - The metadata field can store any information you wish to store with the sender. Usual data would include the ID inside your own system for this particular sender. If you don&#39;t wish to store anything simply specify {}.
  # @param transaction Transaction object to be created
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2012]
  describe 'post_transactions test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_transactions
  # Validates a transaction payload
  # Validates fields in a transaction payload and displays invalid or missing fields
  # @param transaction Transaction payload to be validated
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2012]
  describe 'validate_transactions test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
